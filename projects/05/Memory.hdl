// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=rflag);
    And(a=rflag, b=load, out=rload);
    RAM16K(in=in, load=rload, address=address[0..13], out=rout);

    And(a=address[13], b=address[12], out=b1);
    And(a=address[11], b=address[10], out=b2);
    And(a=address[9],  b=address[8],  out=b3);
    And(a=address[7],  b=address[6],  out=b4);
    And(a=address[5],  b=address[4],  out=b5);
    And(a=address[3],  b=address[2],  out=b6);
    And(a=address[1],  b=address[0],  out=b7);
    And(a=b1, b=b2, out=b8);
    And(a=b3, b=b4, out=b9);
    And(a=b5, b=b6, out=b10);
    And(a=address[14], b=b7, out=b11);
    And(a=b8, b=b9, out=b12);
    And(a=b10, b=b11, out=b13);
    And(a=b12, b=b13, out=kflag);
    And(a=kflag, b=load, out=kload);
    Not(in=kflag, out=nkflag);
    And(a=nkflag, b=address[14], out=sflag);
    And(a=sflag, b=load, out=sload);
    Screen(in=in, load=sload, address=address[2..14], out=sout);
    Keyboard(out=kout);

    Mux4Way16(a=rout, b=false, c=sout, d=kout, sel[0]=kflag, sel[1]=address[14], out=out);
}
